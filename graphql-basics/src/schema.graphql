input createUserInput {
  name:String!
  email:String!
  age:Int
}

input createCommentInput {
  text:String!
  author:ID!
  post:ID!
}

input createPostInput {
  title:String!
  body:String!
  published:Boolean!
  author:ID!
}

input UpdateUserInput {
  name : String
  email: String
  age: Int
}

input UpdatePostInput{
  title: String
  body: String
  published: String
}

input UpdateCommentInput{
  text: String
}

type Mutation {
  createUser(data: createUserInput):User!
  createPost(data:createPostInput) :Post!
  createComment(data:createCommentInput):Comment!

  updateUser(id:ID!,data:UpdateUserInput!):User!
  updatePost(id:ID!,data:UpdatePostInput!):Post!
  updateComment(id:ID!,data:UpdateCommentInput!):Comment!

  deleteUser(id:ID!):User!
  deletePost(id:ID!):Post!
  deleteComment(id:ID!):Comment!
}

type Query {
  users(query :String) : [User!]!
  posts(query : String):[Post]!
  comments:[Comment!]!
  grades : [Int!]!
  greeting(name: String!,position: String!) : String!
  add(numbers:[Float]!): Float!
  me : User
  post : Post
}

type Comment {
  id: ID!
  text : String!
  post: [Post!]!
  author: User!
}

type User {
  id : ID!
  name : String!
  email : String!
  age : Int
  posts: [Post!]!
  comments : [Comment!]!
}

type Post {
  id : ID!
  title : String!
  body : String!
  published : Boolean!
  author : User!
  comments: [Comment!]!
}